{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./dom.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./dom.ts\");\n","type State =\r\n\t| { type: 'expectBlock' }\r\n\t| { type: 'bumpHeaderBlockLevelOrAppendHeaderBlockTextOrFinishHeaderBlock' }\r\n\t| { type: 'appendHeaderBlockTextOrFinishHeaderBlock' }\r\n\t| { type: 'disambiguateWhiteSpaceParagraphBlock' }\r\n\t| { type: 'disambiguateUnorderedListParagraphBlock' }\r\n\t| { type: 'advanceParagraphBlock' }\r\n\t| { type: 'advanceParagraphBlockLinkSpanText' }\r\n\t| { type: 'parsingLinkTarget'; block: 'paragraph' | 'header'; }\r\n\t| { type: 'parsingLink'; block: 'paragraph' | 'header'; }\r\n\t| { type: 'parseTableHeaderCell' }\r\n\t| { type: 'parseTableBodyCell' }\r\n\t;\r\n\r\nexport const TABLE_BLOCK_TYPE = 'table';\r\nexport type MarkDownTableBlock = { type: typeof TABLE_BLOCK_TYPE; header: string[]; body: string[][]; };\r\n\r\nexport const HEADER_BLOCK_TYPE = 'header';\r\nexport type MarkDownHeaderBlock = { type: typeof HEADER_BLOCK_TYPE; level: number; spans: MarkDownHeaderBlockSpan[]; indent: string; };\r\n\r\nexport const PARAGRAPH_BLOCK_TYPE = 'paragraph';\r\nexport type MarkDownParagraphBlock = { type: typeof PARAGRAPH_BLOCK_TYPE; spans: MarkDownParagraphBlockSpan[]; };\r\n\r\nexport const UNORDERED_LIST_BLOCK_TYPE = 'unordered-list';\r\nexport type MarkDownUnorderedListBlock = { type: typeof UNORDERED_LIST_BLOCK_TYPE; items: MarkDownUnorderedListBlockItem[]; };\r\n\r\nexport type MarkDownBlock =\r\n\t| MarkDownTableBlock\r\n\t| MarkDownHeaderBlock\r\n\t| MarkDownParagraphBlock\r\n\t| MarkDownUnorderedListBlock\r\n;\r\n\r\nexport const RUN_SPAN_TYPE = 'run';\r\nexport type MarkDownRunSpan = { type: typeof RUN_SPAN_TYPE; text: string; };\r\n\r\nexport type MarkDownHeaderBlockSpan =\r\n\t| MarkDownRunSpan\r\n\t| MarkDownHeaderBlockLinkSpan\r\n;\r\n\r\nexport const PARAGRAPH_BLOCK_LINE_BREAK_SPAN_TYPE = 'line-break';\r\nexport type MarkDownParagraphBlockLineBreakSpan = { type: typeof PARAGRAPH_BLOCK_LINE_BREAK_SPAN_TYPE; };\r\n\r\nexport const PARAGRAPH_BLOCK_LINK_SPAN_TYPE = 'link';\r\nexport type MarkDownParagraphBlockLinkSpan = { type: typeof PARAGRAPH_BLOCK_LINK_SPAN_TYPE; text: string; url: string; };\r\n\r\nexport const HEADER_BLOCK_LINK_SPAN_TYPE = 'link';\r\nexport type MarkDownHeaderBlockLinkSpan = { type: typeof HEADER_BLOCK_LINK_SPAN_TYPE; text: string; url: string; };\r\n\r\nexport type MarkDownParagraphBlockSpan =\r\n\t| MarkDownRunSpan\r\n\t| MarkDownParagraphBlockLineBreakSpan\r\n\t| MarkDownParagraphBlockLinkSpan\r\n;\r\n\r\nexport type MarkDownUnorderedListBlockItem = { text: string; };\r\n\r\nexport default class MarkDownDOM {\r\n\t// TODO: Make this private and instead have a getter\r\n\tpublic readonly blocks: MarkDownBlock[];\r\n\r\n\tprivate constructor() {\r\n\t\tthis.blocks = [];\r\n\t}\r\n\r\n\tpublic static parse(source: string) {\r\n\t\tlet state: State = { type: 'expectBlock' };\r\n\t\ttry {\r\n\t\t\tconst dom = new MarkDownDOM();\r\n\t\t\r\n\t\t\tfor (let index = 0; index < source.length; index++) {\r\n\t\t\t\tconst character = source[index];\r\n\t\t\t\tswitch (state.type) {\r\n\t\t\t\t\tcase 'expectBlock': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase ' ': {\r\n\t\t\t\t\t\t\t\tdom.pushParagraphBlock();\r\n\t\t\t\t\t\t\t\tdom.pushParagraphBlockRunSpan(character);\r\n\t\t\t\t\t\t\t\tstate = { type: 'disambiguateWhiteSpaceParagraphBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '#': {\r\n\t\t\t\t\t\t\t\tdom.pushHeaderBlock();\r\n\t\t\t\t\t\t\t\tstate = { type: 'bumpHeaderBlockLevelOrAppendHeaderBlockTextOrFinishHeaderBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// TODO: Change to \"paragraph until proven table\", do not assume table straight away.\r\n\t\t\t\t\t\t\tcase '|': {\r\n\t\t\t\t\t\t\t\tdom.pushTableBlock();\r\n\t\t\t\t\t\t\t\tdom.pushTableBlockHeaderCell(); // TODO: Do not push the empty string yet, we don't know we need it, may be end of stream\r\n\t\t\t\t\t\t\t\tstate = { type: 'parseTableHeaderCell' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tdom.pushParagraphBlock();\r\n\t\t\t\t\t\t\t\tstate = { type: 'expectBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tdom.pushParagraphBlock();\r\n\t\t\t\t\t\t\t\tdom.pushParagraphBlockRunSpan(character);\r\n\t\t\t\t\t\t\t\tstate = { type: 'advanceParagraphBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* Table */\r\n\r\n\t\t\t\t\tcase 'parseTableHeaderCell': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '|': {\r\n\t\t\t\t\t\t\t\t// TODO: Not necessarily, may be followed by '\\n' in which case it will be an extra phantom cell\r\n\t\t\t\t\t\t\t\t// TODO: Do not enter the new cell prematurely, instead do it based on the next char\r\n\t\t\t\t\t\t\t\tdom.pushTableBlockHeaderCell(); \r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tdom.pushTableBlockRow();\r\n\t\t\t\t\t\t\t\tstate = { type: 'parseTableBodyCell' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tdom.appendCurrentTableBlockHeaderCellText(character);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 'parseTableBodyCell': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '|': {\r\n\t\t\t\t\t\t\t\tdom.pushTableBlockBodyCell();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tdom.pushTableBlockBodyRow();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tdom.appendCurrentTableBlockBodyCellText(character);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* Header */\r\n\r\n\t\t\t\t\tcase 'bumpHeaderBlockLevelOrAppendHeaderBlockTextOrFinishHeaderBlock': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '#': {\r\n\t\t\t\t\t\t\t\tdom.bumpCurrentHeaderBlockLevel();\r\n\t\t\t\t\t\t\t\tstate = { type: 'appendHeaderBlockTextOrFinishHeaderBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tstate = { type: 'expectBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tdom.appendCurrentHeaderBlockRunSpanText(character);\r\n\t\t\t\t\t\t\t\tstate = { type: 'appendHeaderBlockTextOrFinishHeaderBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 'appendHeaderBlockTextOrFinishHeaderBlock': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tstate = { type: 'expectBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '(': {\r\n\t\t\t\t\t\t\t\tconst runSpan = dom.getCurrentHeaderBlockRunSpan();\r\n\t\t\t\t\t\t\t\tif (runSpan.text.endsWith(']')) {\r\n\t\t\t\t\t\t\t\t\tstate = { type: 'parsingLink', block: 'header' };\r\n\t\t\t\t\t\t\t\t\tindex = index - 1; // Repeat\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tif (dom.getCurrentHeaderBlockSpan().type !== 'run') {\r\n\t\t\t\t\t\t\t\t\tdom.pushHeaderBlockRunSpan(character);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tdom.appendCurrentHeaderBlockRunSpanText(character);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t/* Paragraph */\r\n\r\n\t\t\t\t\tcase 'disambiguateWhiteSpaceParagraphBlock': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase ' ': {\r\n\t\t\t\t\t\t\t\tdom.appendCurrentParagraphBlockRunSpanText(character);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '\\t': throw new Error('todo');\r\n\t\t\t\t\t\t\tcase '#': {\r\n\t\t\t\t\t\t\t\tdom.pushHeaderBlockDisambiguatingParagraphBlock();\r\n\t\t\t\t\t\t\t\tstate = { type: 'bumpHeaderBlockLevelOrAppendHeaderBlockTextOrFinishHeaderBlock' };\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '-': throw new Error('todo');\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tthrow new Error('yo');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// TODO: Looks ugly with all the switches, split into two?\r\n\t\t\t\t\tcase 'parsingLink': {\r\n\t\t\t\t\t\tlet runSpan: MarkDownRunSpan;\r\n\t\t\t\t\t\tswitch (state.block) {\r\n\t\t\t\t\t\t\tcase 'paragraph': runSpan = dom.getCurrentParagraphBlockRunSpan(); break;\r\n\t\t\t\t\t\t\tcase 'header': runSpan = dom.getCurrentHeaderBlockRunSpan(); break;\r\n\t\t\t\t\t\t\tdefault: throw new Error('Nope');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst index = runSpan.text.lastIndexOf('[');\r\n\t\t\t\t\t\tconst title = runSpan.text.substring(index + 1, runSpan.text.length - 1);\r\n\t\t\t\t\t\trunSpan.text = runSpan.text.substring(0, index);\r\n\t\t\t\t\t\tif (runSpan.text === '') {\r\n\t\t\t\t\t\t\tswitch (state.block) {\r\n\t\t\t\t\t\t\t\tcase 'paragraph': dom.popCurrentParagraphBlockRunSpan(); break;\r\n\t\t\t\t\t\t\t\tcase 'header': dom.popCurrentHeaderBlockRunSpan(); break;\r\n\t\t\t\t\t\t\t\tdefault: throw new Error('Nope');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tswitch (state.block) {\r\n\t\t\t\t\t\t\tcase 'paragraph': dom.pushParagraphBlockLinkSpan(title); state = { type: 'parsingLinkTarget', block: 'paragraph' }; break;\r\n\t\t\t\t\t\t\tcase 'header': dom.pushHeaderBlockLinkSpan(title); state = { type: 'parsingLinkTarget', block: 'header' }; break;\r\n\t\t\t\t\t\t\tdefault: throw new Error('Nope');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// TODO: Looks ugly with all the switches, split into two?\r\n\t\t\t\t\tcase 'parsingLinkTarget': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '(': break;\r\n\t\t\t\t\t\t\tcase ')': {\r\n\t\t\t\t\t\t\t\tswitch (state.block) {\r\n\t\t\t\t\t\t\t\t\tcase 'paragraph': state = { type: 'advanceParagraphBlock' }; break;\r\n\t\t\t\t\t\t\t\t\tcase 'header': state = { type: 'appendHeaderBlockTextOrFinishHeaderBlock' }; break;\r\n\t\t\t\t\t\t\t\t\tdefault: throw new Error('Nope');\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tswitch (state.block) {\r\n\t\t\t\t\t\t\t\t\tcase 'paragraph': dom.getCurrentParagraphBlockLinkSpan().url += character; break;\r\n\t\t\t\t\t\t\t\t\tcase 'header': dom.getCurrentHeaderBlockLinkSpan().url += character; break;\r\n\t\t\t\t\t\t\t\t\tdefault: throw new Error('Nope');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase 'advanceParagraphBlock': {\r\n\t\t\t\t\t\tswitch (character) {\r\n\t\t\t\t\t\t\tcase '\\r': throw new Error('\\\\r');\r\n\t\t\t\t\t\t\tcase '\\n': {\r\n\t\t\t\t\t\t\t\tswitch (dom.getCurrentParagraphBlockSpan().type) {\r\n\t\t\t\t\t\t\t\t\tcase 'line-break': dom.finalizeParagraph(); state = { type: 'expectBlock' }; break;\r\n\t\t\t\t\t\t\t\t\tcase 'run': dom.pushParagraphBlockLineBreakSpan(); break;\r\n\t\t\t\t\t\t\t\t\tdefault: throw new Error(`Unexpected span type '${dom.getCurrentParagraphBlockSpan().type}'`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '*': {\r\n\t\t\t\t\t\t\t\tthrow new Error('italics or bold');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcase '(': {\r\n\t\t\t\t\t\t\t\tconst runSpan = dom.getCurrentParagraphBlockRunSpan();\r\n\t\t\t\t\t\t\t\tif (runSpan.text.endsWith(']')) {\r\n\t\t\t\t\t\t\t\t\tstate = { type: 'parsingLink', block: 'paragraph' };\r\n\t\t\t\t\t\t\t\t\tindex = index - 1; // Repeat\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tswitch (dom.getCurrentParagraphBlockSpan().type) {\r\n\t\t\t\t\t\t\t\t\tcase 'line-break': dom.pushParagraphBlockRunSpan(character); break;\r\n\t\t\t\t\t\t\t\t\tcase 'run': dom.appendCurrentParagraphBlockRunSpanText(character); break;\r\n\t\t\t\t\t\t\t\t\tcase 'link': dom.pushParagraphBlockRunSpan(character); break;\r\n\t\t\t\t\t\t\t\t\tdefault: throw new Error(`Unexpected type '${dom.getCurrentParagraphBlockSpan().type}'`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\r\n\t\t\t\t\tdefault: throw new Error(`Invalid state '${(state as State /* never */).type}' at index ${index}.`);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Fool types so we can have extra info for the viewer but nice types for the lib\r\n\t\t\treturn ({ ...dom, state } as any) as MarkDownDOM;\r\n\t\t} catch (error) {\r\n\t\t\treturn ({ error: { message: error.message, stack: error.stack.split(/\\n/g) }, state } as any) as MarkDownDOM;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic serialize() {\r\n\t\tlet source = '';\r\n\t\tfor (const block of this.blocks) {\r\n\t\t\tswitch (block.type) {\r\n\t\t\t\tcase 'header': {\r\n\t\t\t\t\tsource += block.indent + '#'.repeat(block.level);\r\n\t\t\t\t\tfor (const span of block.spans) {\r\n\t\t\t\t\t\tswitch (span.type) {\r\n\t\t\t\t\t\t\tcase 'run': {\r\n\t\t\t\t\t\t\t\tsource += span.text;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'paragraph': {\r\n\t\t\t\t\tfor (const span of block.spans) {\r\n\t\t\t\t\t\tswitch (span.type) {\r\n\t\t\t\t\t\t\tcase 'run': {\r\n\t\t\t\t\t\t\t\tsource += span.text;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tsource += 'todo';\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tsource += 'todo';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn source;\r\n\t}\r\n\r\n\tpublic getCurrentBlock() {\r\n\t\tif (this.blocks.length === 0) {\r\n\t\t\tthrow new Error('No blocks yet, cannot get current block.');\r\n\t\t}\r\n\r\n\t\treturn this.blocks[this.blocks.length - 1];\r\n\t}\r\n\r\n\t/* Paragraph */\r\n\r\n\tpublic getCurrentParagraphBlock() {\r\n\t\tconst block = this.getCurrentBlock();\r\n\t\tif (block.type !== PARAGRAPH_BLOCK_TYPE) {\r\n\t\t\tthrow new Error(`Current block type is ${block.type}, not ${PARAGRAPH_BLOCK_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn block;\r\n\t}\r\n\r\n\tpublic getCurrentParagraphBlockSpan() {\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tif (block.spans.length === 0) {\r\n\t\t\tthrow new Error('No spans yet, cannot get current paragraph block span.');\r\n\t\t}\r\n\r\n\t\treturn block.spans[block.spans.length - 1];\r\n\t}\r\n\r\n\tpublic getCurrentParagraphBlockRunSpan() {\r\n\t\tconst span = this.getCurrentParagraphBlockSpan();\r\n\t\tif (span.type !== RUN_SPAN_TYPE) {\r\n\t\t\tthrow new Error(`Current span type is ${span.type}, not ${RUN_SPAN_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn span;\r\n\t}\r\n\r\n\tpublic getCurrentParagraphBlockLinkSpan() {\r\n\t\tconst span = this.getCurrentParagraphBlockSpan();\r\n\t\tif (span.type !== PARAGRAPH_BLOCK_LINK_SPAN_TYPE) {\r\n\t\t\tthrow new Error(`Current span type is ${span.type}, not ${PARAGRAPH_BLOCK_LINK_SPAN_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn span;\r\n\t}\r\n\r\n\tpublic getCurrentHeaderBlockLinkSpan() {\r\n\t\tconst span = this.getCurrentHeaderBlockSpan();\r\n\t\tif (span.type !== HEADER_BLOCK_LINK_SPAN_TYPE) {\r\n\t\t\tthrow new Error(`Current span type is ${span.type}, not ${HEADER_BLOCK_LINK_SPAN_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn span;\r\n\t}\r\n\r\n\tpublic popCurrentParagraphBlockRunSpan() {\r\n\t\tconst span = this.getCurrentParagraphBlockRunSpan();\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tif (block.spans[block.spans.length - 1] !== span) {\r\n\t\t\tthrow new Error('Mismatch!');\r\n\t\t}\r\n\r\n\t\tblock.spans.pop();\r\n\t}\r\n\r\n\tpublic popCurrentHeaderBlockRunSpan() {\r\n\t\tconst span = this.getCurrentHeaderBlockSpan();\r\n\t\tconst block = this.getCurrentHeaderBlock();\r\n\t\tif (span.type !== RUN_SPAN_TYPE) {\r\n\t\t\tthrow new Error(`Current span type is ${span.type}, not ${RUN_SPAN_TYPE}.`);\r\n\t\t}\r\n\r\n\t\tblock.spans.pop();\r\n\t}\r\n\r\n\tpublic pushParagraphBlock() {\r\n\t\tthis.blocks.push({ type: PARAGRAPH_BLOCK_TYPE, spans: [ ] });\r\n\t}\r\n\r\n\tpublic pushParagraphBlockRunSpan(text: string) {\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tblock.spans.push({ type: RUN_SPAN_TYPE, text });\r\n\t}\r\n\r\n\tpublic pushParagraphBlockLineBreakSpan() {\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tblock.spans.push({ type: PARAGRAPH_BLOCK_LINE_BREAK_SPAN_TYPE });\r\n\t}\r\n\r\n\tpublic pushParagraphBlockLinkSpan(text: string) {\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tblock.spans.push({ type: PARAGRAPH_BLOCK_LINK_SPAN_TYPE, text, url: '' });\r\n\t}\r\n\r\n\tpublic pushHeaderBlockLinkSpan(text: string) {\r\n\t\tconst block = this.getCurrentHeaderBlock();\r\n\t\tblock.spans.push({ type: HEADER_BLOCK_LINK_SPAN_TYPE, text, url: '' });\r\n\t}\r\n\r\n\tpublic pushHeaderBlockRunSpan(character: string) {\r\n\t\tconst block = this.getCurrentHeaderBlock();\r\n\t\tblock.spans.push({ type: RUN_SPAN_TYPE, text: character });\r\n\t}\r\n\r\n\tpublic appendCurrentParagraphBlockRunSpanText(char: string) {\r\n\t\tthis.getCurrentParagraphBlockRunSpan().text += char;\r\n\t}\r\n\r\n\tpublic finalizeParagraph() {\r\n\t\tthis.getCurrentParagraphBlock().spans.pop();\r\n\t}\r\n\r\n\t/* Header */\r\n\r\n\tpublic getCurrentHeaderBlock() {\r\n\t\tconst block = this.getCurrentBlock();\r\n\t\tif (block.type !== HEADER_BLOCK_TYPE) {\r\n\t\t\tthrow new Error(`Current block type is ${block.type}, not ${HEADER_BLOCK_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn block;\r\n\t}\r\n\r\n\tpublic getCurrentTableBlock() {\r\n\t\tconst block = this.getCurrentBlock();\r\n\t\tif (block.type !== TABLE_BLOCK_TYPE) {\r\n\t\t\tthrow new Error(`Current block type is ${block.type}, not ${TABLE_BLOCK_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn block;\r\n\t}\r\n\r\n\tpublic getCurrentHeaderBlockSpan() {\r\n\t\tconst block = this.getCurrentHeaderBlock();\r\n\t\tif (block.spans.length === 0) {\r\n\t\t\tthrow new Error('No spans yet, cannot get current header block span.');\r\n\t\t}\r\n\r\n\t\treturn block.spans[block.spans.length - 1];\r\n\t}\r\n\r\n\tpublic getCurrentHeaderBlockRunSpan() {\r\n\t\tconst span = this.getCurrentHeaderBlockSpan();\r\n\t\tif (span.type !== RUN_SPAN_TYPE) {\r\n\t\t\tthrow new Error(`Current span type is ${span.type}, not ${RUN_SPAN_TYPE}.`);\r\n\t\t}\r\n\r\n\t\treturn span;\r\n\t}\r\n\r\n\tpublic pushHeaderBlock(indent: string = '') {\r\n\t\tthis.blocks.push({ type: HEADER_BLOCK_TYPE, level: 1, spans: [ ], indent });\r\n\t}\r\n\r\n\tpublic pushTableBlock() {\r\n\t\tthis.blocks.push({ type: TABLE_BLOCK_TYPE, header: [], body: [] });\r\n\t}\r\n\r\n\tpublic pushTableBlockHeaderCell() {\r\n\t\tthis.getCurrentTableBlock().header.push('');\r\n\t}\r\n\r\n\tpublic pushTableBlockRow() {\r\n\t\tthis.getCurrentTableBlock().body.push([]);\r\n\t}\r\n\tpublic pushTableBlockBodyCell() {\r\n\t\tconst body = this.getCurrentTableBlock().body;\r\n\t\tif (body.length === 0) {\r\n\t\t\tthrow new Error('Not today');\r\n\t\t}\r\n\r\n\t\tbody[body.length - 1].push('');\r\n\t}\r\n\r\n\tpublic pushTableBlockBodyRow() {\r\n\t\tconst body = this.getCurrentTableBlock().body;\r\n\t\tbody.push([]);\r\n\t}\r\n\r\n\tpublic appendCurrentTableBlockHeaderCellText(character: string) {\r\n\t\tconst block = this.getCurrentTableBlock();\r\n\t\tif (block.header.length === 0) {\r\n\t\t\tthrow new Error('Nada');\r\n\t\t}\r\n\r\n\t\tblock.header[block.header.length - 1] += character;\r\n\t}\r\n\r\n\tpublic appendCurrentTableBlockBodyCellText(character: string) {\r\n\t\tconst block = this.getCurrentTableBlock();\r\n\t\tif (block.body.length === 0 || block.body[0].length === 0) {\r\n\t\t\tthrow new Error(':-(');\r\n\t\t}\r\n\r\n\t\tconst row = block.body[block.body.length - 1];\r\n\t\trow[row.length - 1] += character;\r\n\t}\r\n\r\n\tpublic pushHeaderBlockDisambiguatingParagraphBlock() {\r\n\t\tconst block = this.getCurrentParagraphBlock();\r\n\t\tif (block.spans.length !== 1) {\r\n\t\t\tthrow new Error('Paragraph block is supposed to be ambiguous, but has multiple spans!');\r\n\t\t}\r\n\r\n\t\tconst span = this.getCurrentParagraphBlockRunSpan();\r\n\t\tif (span.text.trim() !== '') {\r\n\t\t\tthrow new Error('Run span is supposed to be ambiguous, but has non-whitespace characters!');\r\n\t\t}\r\n\r\n\t\tthis.blocks.pop(); // Remove ambiguous paragraph.\r\n\t\tthis.pushHeaderBlock(span.text);\r\n\t}\r\n\r\n\tpublic bumpCurrentHeaderBlockLevel() {\r\n\t\tthis.getCurrentHeaderBlock().level++;\r\n\t}\r\n\r\n\tpublic appendCurrentHeaderBlockRunSpanText(char: string) {\r\n\t\tif (this.getCurrentHeaderBlock().spans.length === 0) {\r\n\t\t\tthis.getCurrentHeaderBlock().spans = [ { type: RUN_SPAN_TYPE, text: char } ];\r\n\t\t} else {\r\n\t\t\tthis.getCurrentHeaderBlockRunSpan().text += char;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"],"sourceRoot":""}