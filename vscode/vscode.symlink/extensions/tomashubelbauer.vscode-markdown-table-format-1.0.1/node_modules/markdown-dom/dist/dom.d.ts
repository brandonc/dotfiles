export declare const TABLE_BLOCK_TYPE = "table";
export declare type MarkDownTableBlock = {
    type: typeof TABLE_BLOCK_TYPE;
    header: string[];
    body: string[][];
};
export declare const HEADER_BLOCK_TYPE = "header";
export declare type MarkDownHeaderBlock = {
    type: typeof HEADER_BLOCK_TYPE;
    level: number;
    spans: MarkDownHeaderBlockSpan[];
    indent: string;
};
export declare const PARAGRAPH_BLOCK_TYPE = "paragraph";
export declare type MarkDownParagraphBlock = {
    type: typeof PARAGRAPH_BLOCK_TYPE;
    spans: MarkDownParagraphBlockSpan[];
};
export declare const UNORDERED_LIST_BLOCK_TYPE = "unordered-list";
export declare type MarkDownUnorderedListBlock = {
    type: typeof UNORDERED_LIST_BLOCK_TYPE;
    items: MarkDownUnorderedListBlockItem[];
};
export declare type MarkDownBlock = MarkDownTableBlock | MarkDownHeaderBlock | MarkDownParagraphBlock | MarkDownUnorderedListBlock;
export declare const RUN_SPAN_TYPE = "run";
export declare type MarkDownRunSpan = {
    type: typeof RUN_SPAN_TYPE;
    text: string;
};
export declare type MarkDownHeaderBlockSpan = MarkDownRunSpan | MarkDownHeaderBlockLinkSpan;
export declare const PARAGRAPH_BLOCK_LINE_BREAK_SPAN_TYPE = "line-break";
export declare type MarkDownParagraphBlockLineBreakSpan = {
    type: typeof PARAGRAPH_BLOCK_LINE_BREAK_SPAN_TYPE;
};
export declare const PARAGRAPH_BLOCK_LINK_SPAN_TYPE = "link";
export declare type MarkDownParagraphBlockLinkSpan = {
    type: typeof PARAGRAPH_BLOCK_LINK_SPAN_TYPE;
    text: string;
    url: string;
};
export declare const HEADER_BLOCK_LINK_SPAN_TYPE = "link";
export declare type MarkDownHeaderBlockLinkSpan = {
    type: typeof HEADER_BLOCK_LINK_SPAN_TYPE;
    text: string;
    url: string;
};
export declare type MarkDownParagraphBlockSpan = MarkDownRunSpan | MarkDownParagraphBlockLineBreakSpan | MarkDownParagraphBlockLinkSpan;
export declare type MarkDownUnorderedListBlockItem = {
    text: string;
};
export default class MarkDownDOM {
    readonly blocks: MarkDownBlock[];
    private constructor();
    static parse(source: string): MarkDownDOM;
    serialize(): string;
    getCurrentBlock(): MarkDownBlock;
    getCurrentParagraphBlock(): MarkDownParagraphBlock;
    getCurrentParagraphBlockSpan(): MarkDownParagraphBlockSpan;
    getCurrentParagraphBlockRunSpan(): MarkDownRunSpan;
    getCurrentParagraphBlockLinkSpan(): MarkDownParagraphBlockLinkSpan;
    getCurrentHeaderBlockLinkSpan(): MarkDownHeaderBlockLinkSpan;
    popCurrentParagraphBlockRunSpan(): void;
    popCurrentHeaderBlockRunSpan(): void;
    pushParagraphBlock(): void;
    pushParagraphBlockRunSpan(text: string): void;
    pushParagraphBlockLineBreakSpan(): void;
    pushParagraphBlockLinkSpan(text: string): void;
    pushHeaderBlockLinkSpan(text: string): void;
    pushHeaderBlockRunSpan(character: string): void;
    appendCurrentParagraphBlockRunSpanText(char: string): void;
    finalizeParagraph(): void;
    getCurrentHeaderBlock(): MarkDownHeaderBlock;
    getCurrentTableBlock(): MarkDownTableBlock;
    getCurrentHeaderBlockSpan(): MarkDownHeaderBlockSpan;
    getCurrentHeaderBlockRunSpan(): MarkDownRunSpan;
    pushHeaderBlock(indent?: string): void;
    pushTableBlock(): void;
    pushTableBlockHeaderCell(): void;
    pushTableBlockRow(): void;
    pushTableBlockBodyCell(): void;
    pushTableBlockBodyRow(): void;
    appendCurrentTableBlockHeaderCellText(character: string): void;
    appendCurrentTableBlockBodyCellText(character: string): void;
    pushHeaderBlockDisambiguatingParagraphBlock(): void;
    bumpCurrentHeaderBlockLevel(): void;
    appendCurrentHeaderBlockRunSpanText(char: string): void;
}
